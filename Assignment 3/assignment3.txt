power.cpp

long double power_iter(double x, int n)
{
    double x_n = 1;
    for(int i=0; i<n; i++){
        x_n *= x;
    }
    return x_n;
}
Recurrence Eqn: N/A
Running Time:   Θ(n)


long double power_rec(double x, int n)
{
    if(n==0) return 1;
    else return x*power_rec(x,n-1);
}
Recurrence Eqn: T(n) = T(n-1) + 1
Running Time:   Θ(n)


long double power_half(double x, int n)
{
    if(n==0) return 1;
    else if(n%2==1) return x*power_half(x,n/2)*power_half(x,n/2);
    else return power_half(x,n/2)*power_half(x,n/2);
}
Recurrence Eqn: T(n) = T(n/2) + 1
Running Time:   Θ(lg n)


maxsum.cpp

maxsums maxsum_slow(int A[], int n)
{
    maxsums m;
    m.entire = sol(0,n-1,sum_array(A,0,n-1));
    m.begin = sol(0,0,A[0]);
    for (int i=1; i<n; i++)
        m.begin = maxsol(m.begin,sol(0,i,sum_array(A,0,i)));
    m.end = sol(n-1,n-1,A[n-1]);
    for (int i=n-2; i>=0; i--)
        m.end = maxsol(m.end,sol(i,n-1,sum_array(A,i,n-1)));
    m.best = maxsol(m.begin,m.end);
    for (int i=1; i<n-1; i++)
        for (int j=i; j<n-1; j++)
            m.best = maxsol(m.best,sol(i,j,sum_array(A,i,j)));
    return m;
}
Recurrence Eqn: N/A
Running Time:   Θ(n^3)


maxsums maxsum_fast(int A[], int start, int stop)
{
    maxsums m;
    if(start==stop){
        sol a(start,stop,A[start]);
        m.entire = m.begin = m.end = m.best = a;
        return m;
    }
    int mid = (start+stop)/2;
    maxsums first,second;
    first = maxsum_fast(A,start,mid);
    second = maxsum_fast(A,mid+1,stop);
    m.entire = concat(first.entire,second.entire);
    m.begin = maxsol(first.begin,concat(first.entire,second.begin));
    m.end = maxsol(second.end,concat(first.end,second.entire));
    m.best = maxsol(maxsol(first.best,second.best),concat(first.end,second.begin));
    return m;
}
Recurrence Eqn: T(n) = 2 * T(n/2) + 1
Running Time:   Θ(n)